var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  stylusLoader: () => stylusLoader
});
var path = __toModule(require("path"));
var import_fs = __toModule(require("fs"));

// src/stylus-to-css.ts
var import_stylus = __toModule(require("stylus"));
function stylusToCss(content, options) {
  return new Promise((resolve2, reject) => {
    const styl = (0, import_stylus.default)(content);
    styl.set("filename", options.filePath);
    if (Array.isArray(options.import)) {
      options.import.forEach((it) => styl.import(it));
    }
    if (Array.isArray(options.include)) {
      options.include.forEach((it) => styl.include(it));
    }
    if (Array.isArray(options.define)) {
      options.define.forEach((it) => {
        if (!Array.isArray(it) || typeof it[0] !== "string" || it[1] === void 0) {
          return;
        }
        styl.define(it[0], it[1], it[2] || false);
      });
    }
    if (Array.isArray(options.use)) {
      options.use.forEach((it) => styl.use(it));
    }
    if (options.includeCss) {
      styl.set("include css", true);
    }
    if (options.sourcemap) {
      styl.set("sourcemap", {
        comment: true,
        inline: true
      });
    }
    styl.render((err, css) => {
      if (err) {
        return reject(err);
      }
      resolve2(css);
    });
  });
}

// src/index.ts
function stylusLoader(pluginOptions = {}) {
  return {
    name: "stylus-loader",
    setup(build) {
      const { sourcemap } = build.initialOptions;
      build.onResolve({ filter: /\.(styl|stylus)$/ }, (args) => {
        return {
          path: path.resolve(process.cwd(), path.relative(process.cwd(), args.resolveDir), args.path),
          namespace: "stylus"
        };
      });
      build.onResolve({ filter: /.*/ }, (args) => {
        if (args.namespace !== "stylus") {
          return;
        }
        return {
          external: true
        };
      });
      build.onLoad({
        filter: /.*/,
        namespace: "stylus"
      }, async (args) => {
        const content = await import_fs.promises.readFile(args.path, "utf8");
        const code = await stylusToCss(content, __spreadProps(__spreadValues({}, pluginOptions.stylusOptions), {
          filePath: args.path,
          sourcemap: sourcemap === true || sourcemap === "inline" || sourcemap === "external" || sourcemap === "both"
        }));
        return {
          contents: code,
          loader: "css",
          resolveDir: path.dirname(args.path)
        };
      });
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  stylusLoader
});
