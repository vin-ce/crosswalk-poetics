var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/index.ts
import {
  dirname,
  relative,
  resolve
} from "path";
import { promises as fs } from "fs";

// src/stylus-to-css.ts
import stylus from "stylus";
function stylusToCss(content, options) {
  return new Promise((resolve2, reject) => {
    const styl = stylus(content);
    styl.set("filename", options.filePath);
    if (Array.isArray(options.import)) {
      options.import.forEach((it) => styl.import(it));
    }
    if (Array.isArray(options.include)) {
      options.include.forEach((it) => styl.include(it));
    }
    if (Array.isArray(options.define)) {
      options.define.forEach((it) => {
        if (!Array.isArray(it) || typeof it[0] !== "string" || it[1] === void 0) {
          return;
        }
        styl.define(it[0], it[1], it[2] || false);
      });
    }
    if (Array.isArray(options.use)) {
      options.use.forEach((it) => styl.use(it));
    }
    if (options.includeCss) {
      styl.set("include css", true);
    }
    if (options.sourcemap) {
      styl.set("sourcemap", {
        comment: true,
        inline: true
      });
    }
    styl.render((err, css) => {
      if (err) {
        return reject(err);
      }
      resolve2(css);
    });
  });
}

// src/index.ts
function stylusLoader(pluginOptions = {}) {
  return {
    name: "stylus-loader",
    setup(build) {
      const { sourcemap } = build.initialOptions;
      build.onResolve({ filter: /\.(styl|stylus)$/ }, (args) => {
        return {
          path: resolve(process.cwd(), relative(process.cwd(), args.resolveDir), args.path),
          namespace: "stylus"
        };
      });
      build.onResolve({ filter: /.*/ }, (args) => {
        if (args.namespace !== "stylus") {
          return;
        }
        return {
          external: true
        };
      });
      build.onLoad({
        filter: /.*/,
        namespace: "stylus"
      }, async (args) => {
        const content = await fs.readFile(args.path, "utf8");
        const code = await stylusToCss(content, __spreadProps(__spreadValues({}, pluginOptions.stylusOptions), {
          filePath: args.path,
          sourcemap: sourcemap === true || sourcemap === "inline" || sourcemap === "external" || sourcemap === "both"
        }));
        return {
          contents: code,
          loader: "css",
          resolveDir: dirname(args.path)
        };
      });
    }
  };
}
export {
  stylusLoader
};
